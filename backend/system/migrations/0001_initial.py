# Generated by Django 5.2.7 on 2025-10-23 10:42

import django.contrib.auth.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('username', models.CharField(db_index=True, help_text='用户账号', max_length=50, unique=True, verbose_name='用户账号')),
                ('email', models.EmailField(blank=True, help_text='邮箱', max_length=60, null=True, verbose_name='邮箱')),
                ('mobile', models.CharField(blank=True, help_text='电话', max_length=30, null=True, verbose_name='电话')),
                ('avatar', models.CharField(blank=True, help_text='头像', max_length=200, null=True, verbose_name='头像')),
                ('name', models.CharField(help_text='姓名', max_length=40, verbose_name='姓名')),
                ('nickname', models.CharField(blank=True, default='', help_text='用户昵称', max_length=100, null=True, verbose_name='用户昵称')),
                ('gender', models.SmallIntegerField(blank=True, choices=[(0, '未知'), (1, '女'), (2, '男')], default=0, help_text='性别', null=True, verbose_name='性别')),
                ('login_error_nums', models.IntegerField(default=0, help_text='登录错误次数', verbose_name='登录错误次数')),
                ('identity', models.SmallIntegerField(blank=True, choices=[(0, '超级管理员'), (1, '系统管理员'), (2, '前端用户')], default=2, help_text='身份标识', null=True, verbose_name='身份标识')),
                ('is_delete', models.BooleanField(default=False, help_text='是否逻辑删除', verbose_name='是否逻辑删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='状态')),
                ('is_staff', models.BooleanField(default=False, verbose_name='是否员工')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='是否超级管理员')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '用户表',
                'verbose_name_plural': '用户表',
                'db_table': 'leeadmin_users',
                'ordering': ('-create_datetime',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Button',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('name', models.CharField(help_text='权限名称', max_length=64, verbose_name='权限名称')),
                ('value', models.CharField(help_text='权限值', max_length=64, verbose_name='权限值')),
                ('status', models.BooleanField(blank=True, default=True, help_text='状态', null=True, verbose_name='状态')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '权限标识表',
                'verbose_name_plural': '权限标识表',
                'db_table': 'leeadmin_button',
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='Dept',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('name', models.CharField(help_text='部门名称', max_length=64, verbose_name='部门名称')),
                ('key', models.CharField(blank=True, help_text='关联字符', max_length=64, null=True, unique=True, verbose_name='关联字符')),
                ('sort', models.IntegerField(default=1, help_text='显示排序', verbose_name='显示排序')),
                ('owner', models.CharField(blank=True, help_text='负责人', max_length=32, null=True, verbose_name='负责人')),
                ('phone', models.CharField(blank=True, help_text='联系电话', max_length=32, null=True, verbose_name='联系电话')),
                ('email', models.EmailField(blank=True, help_text='邮箱', max_length=32, null=True, verbose_name='邮箱')),
                ('status', models.BooleanField(default=True, help_text='角色状态', verbose_name='角色状态')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, default=False, help_text='上级部门', null=True, on_delete=django.db.models.deletion.CASCADE, to='system.dept', verbose_name='上级部门')),
            ],
            options={
                'verbose_name': '部门表',
                'verbose_name_plural': '部门表',
                'db_table': 'leeadmin_dept',
                'ordering': ('sort',),
            },
        ),
        migrations.AddField(
            model_name='users',
            name='dept',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='关联部门', null=True, on_delete=django.db.models.deletion.PROTECT, to='system.dept', verbose_name='所属部门'),
        ),
        migrations.CreateModel(
            name='Dictionary',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('label', models.CharField(blank=True, help_text='字典名称', max_length=100, null=True, verbose_name='字典名称')),
                ('value', models.CharField(blank=True, help_text='字典编号/实际值', max_length=200, null=True, verbose_name='字典编号')),
                ('status', models.BooleanField(default=True, help_text='状态', verbose_name='状态')),
                ('sort', models.IntegerField(blank=True, default=1, help_text='显示排序', null=True, verbose_name='显示排序')),
                ('remark', models.CharField(blank=True, help_text='备注', max_length=255, null=True, verbose_name='备注')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, help_text='父级', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sublist', to='system.dictionary', verbose_name='父级')),
            ],
            options={
                'verbose_name': '字典表',
                'verbose_name_plural': '字典表',
                'db_table': 'leeadmin_dictionary',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('username', models.CharField(blank=True, help_text='登录用户名', max_length=32, null=True, verbose_name='登录用户名')),
                ('ip', models.CharField(blank=True, help_text='登录ip', max_length=32, null=True, verbose_name='登录ip')),
                ('agent', models.CharField(blank=True, help_text='agent信息', max_length=1500, null=True, verbose_name='agent信息')),
                ('browser', models.CharField(blank=True, help_text='浏览器名', max_length=200, null=True, verbose_name='浏览器名')),
                ('os', models.CharField(blank=True, help_text='操作系统', max_length=150, null=True, verbose_name='操作系统')),
                ('login_type', models.IntegerField(choices=[(1, '后台登录')], default=1, help_text='登录类型', verbose_name='登录类型')),
                ('ip_area', models.CharField(blank=True, help_text='IP归属地', max_length=100, null=True, verbose_name='IP归属地')),
                ('msg', models.CharField(blank=True, max_length=255, null=True, verbose_name='自定义内容')),
                ('status', models.BooleanField(default=True, help_text='响应状态', verbose_name='响应状态')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '登录日志',
                'verbose_name_plural': '登录日志',
                'db_table': 'leeadmin_login_log',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('icon', models.CharField(blank=True, help_text='菜单图标', max_length=64, null=True, verbose_name='菜单图标')),
                ('code', models.CharField(help_text='菜单编码', max_length=64, unique=True, verbose_name='菜单编码')),
                ('name', models.CharField(help_text='菜单名称', max_length=64, verbose_name='菜单名称')),
                ('sort', models.IntegerField(blank=True, default=1, help_text='显示排序', null=True, verbose_name='显示排序')),
                ('type', models.SmallIntegerField(choices=[(0, '目录'), (1, '菜单'), (2, 'iframe'), (3, '外链')], default=0, help_text='是否外链', verbose_name='是否外链')),
                ('link_url', models.CharField(blank=True, help_text='链接地址', max_length=255, null=True, verbose_name='链接地址')),
                ('web_path', models.CharField(blank=True, help_text='路由地址', max_length=128, null=True, verbose_name='路由地址')),
                ('component', models.CharField(blank=True, help_text='组件地址', max_length=128, null=True, verbose_name='组件地址')),
                ('component_name', models.CharField(blank=True, help_text='组件名称', max_length=50, null=True, verbose_name='组件名称')),
                ('status', models.BooleanField(blank=True, default=True, help_text='按钮状态', null=True, verbose_name='按钮状态')),
                ('isautopm', models.BooleanField(blank=True, default=False, help_text='自动创建按钮权限', null=True, verbose_name='自动创建按钮权限')),
                ('cache', models.BooleanField(blank=True, default=False, help_text='是否页面缓存', null=True, verbose_name='是否页面缓存')),
                ('visible', models.BooleanField(blank=True, default=True, help_text='侧边栏中是否显示', null=True, verbose_name='侧边栏中是否显示')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, help_text='上级菜单', null=True, on_delete=django.db.models.deletion.CASCADE, to='system.menu', verbose_name='上级菜单')),
            ],
            options={
                'verbose_name': '菜单表',
                'verbose_name_plural': '菜单表',
                'db_table': 'leeadmin_menu',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='MenuButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='名称', max_length=64, verbose_name='名称')),
                ('value', models.CharField(help_text='权限值', max_length=64, verbose_name='权限值')),
                ('api', models.CharField(help_text='接口地址', max_length=64, verbose_name='接口地址')),
                ('method', models.SmallIntegerField(blank=True, default=0, help_text='接口请求方法', null=True, verbose_name='接口请求方法')),
                ('menu', models.ForeignKey(db_constraint=False, help_text='关联菜单', on_delete=django.db.models.deletion.CASCADE, related_name='menu_buttons', to='system.menu', verbose_name='关联菜单')),
            ],
            options={
                'verbose_name': '菜单权限表',
                'verbose_name_plural': '菜单权限表',
                'db_table': 'leeadmin_menu_button',
                'ordering': ('-name',),
            },
        ),
        migrations.CreateModel(
            name='MenuField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(blank=True, max_length=70, null=True, verbose_name='所属模型Model')),
                ('field_name', models.CharField(max_length=64, verbose_name='模型表字段名')),
                ('title', models.CharField(max_length=64, verbose_name='字段显示名')),
                ('menu', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='menu_fields', to='system.menu', verbose_name='关联菜单')),
            ],
            options={
                'verbose_name': '菜单字段表',
                'verbose_name_plural': '菜单字段表',
                'db_table': 'leeadmin_menu_field',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('target_type', models.SmallIntegerField(choices=[(0, '平台公告'), (1, '按用户'), (2, '按部门'), (3, '按角色')], default=0, verbose_name='目标类型')),
                ('tag_type', models.SmallIntegerField(choices=[(0, '平台公告'), (1, '按用户'), (2, '按部门'), (3, '按角色')], default=0, verbose_name='标签类型')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('dept', models.ManyToManyField(blank=True, db_constraint=False, to='system.dept', verbose_name='关联部门')),
            ],
            options={
                'verbose_name': '消息通知',
                'verbose_name_plural': '消息通知',
                'db_table': 'leeadmin_message',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='NotificationUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(blank=True, default=False, null=True, verbose_name='是否已读')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='已读时间')),
                ('is_delete', models.BooleanField(default=False, help_text='是否逻辑删除', verbose_name='是否逻辑删除')),
                ('notification', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='system.notification', verbose_name='关联消息')),
                ('user', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='关联用户表')),
            ],
            options={
                'verbose_name': '消息用户',
                'verbose_name_plural': '消息用户',
                'db_table': 'leeadmin_message_users',
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='notifications_users', through='system.NotificationUsers', to=settings.AUTH_USER_MODEL, verbose_name='关联用户'),
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('creator_name', models.CharField(blank=True, help_text='操作人', max_length=30, null=True, verbose_name='操作人')),
                ('req_modular', models.CharField(blank=True, help_text='请求模块', max_length=64, null=True, verbose_name='请求模块')),
                ('req_path', models.TextField(blank=True, help_text='请求地址', null=True, verbose_name='请求地址')),
                ('req_body', models.TextField(blank=True, help_text='请求参数', null=True, verbose_name='请求参数')),
                ('req_method', models.CharField(blank=True, help_text='请求方式', max_length=8, null=True, verbose_name='请求方式')),
                ('req_msg', models.TextField(blank=True, help_text='操作说明', null=True, verbose_name='操作说明')),
                ('req_ip', models.CharField(blank=True, help_text='请求ip地址', max_length=32, null=True, verbose_name='请求ip地址')),
                ('req_browser', models.CharField(blank=True, help_text='请求浏览器', max_length=64, null=True, verbose_name='请求浏览器')),
                ('resp_code', models.CharField(blank=True, help_text='响应状态码', max_length=32, null=True, verbose_name='响应状态码')),
                ('req_os', models.CharField(blank=True, help_text='操作系统', max_length=64, null=True, verbose_name='操作系统')),
                ('ip_area', models.CharField(blank=True, help_text='IP归属地', max_length=100, null=True, verbose_name='IP归属地')),
                ('json_result', models.TextField(blank=True, help_text='返回信息', null=True, verbose_name='返回信息')),
                ('status', models.BooleanField(default=False, help_text='响应状态', verbose_name='响应状态')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
                'db_table': 'leeadmin_operation_log',
                'ordering': ('-create_datetime',),
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('name', models.CharField(error_messages={'unique': '角色名称已存在'}, help_text='角色名称', max_length=64, unique=True, verbose_name='角色名称')),
                ('key', models.CharField(error_messages={'unique': '权限字符已存在'}, help_text='权限字符', max_length=64, unique=True, verbose_name='权限字符')),
                ('sort', models.IntegerField(default=1, help_text='角色顺序', verbose_name='角色顺序')),
                ('status', models.BooleanField(default=True, help_text='角色状态', verbose_name='角色状态')),
                ('remark', models.CharField(blank=True, max_length=255, null=True, verbose_name='备注')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '角色表',
                'verbose_name_plural': '角色表',
                'db_table': 'leeadmin_role',
                'ordering': ('sort',),
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='role',
            field=models.ManyToManyField(blank=True, db_constraint=False, to='system.role', verbose_name='关联角色'),
        ),
        migrations.CreateModel(
            name='FieldPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_view', models.BooleanField(default=True, verbose_name='查看权限')),
                ('can_create', models.BooleanField(default=True, verbose_name='创建权限')),
                ('can_update', models.BooleanField(default=True, verbose_name='更新权限')),
                ('field', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='menu_field_permission', to='system.menufield', verbose_name='字段')),
                ('role', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='role_field_permission', to='system.role', verbose_name='关联角色')),
            ],
            options={
                'verbose_name': '字段权限表',
                'verbose_name_plural': '字段权限表',
                'db_table': 'leeadmin_field_permission',
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='users',
            name='role',
            field=models.ManyToManyField(db_constraint=False, help_text='关联角色', related_name='role_users', to='system.role', verbose_name='关联角色'),
        ),
        migrations.CreateModel(
            name='RoleMenuButtonPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_scope', models.SmallIntegerField(choices=[(0, '仅本人数据权限'), (1, '本部门数据权限'), (2, '本部门及以下数据权限'), (3, '自定义部门数据权限'), (4, '全部数据权限'), (5, '同全局数据权限')], default=5, help_text='数据权限', verbose_name='数据权限')),
                ('dept', models.ManyToManyField(blank=True, db_constraint=False, help_text='数据权限-关联部门', to='system.dept', verbose_name='数据权限-关联部门')),
                ('menu_button', models.ForeignKey(blank=True, db_constraint=False, help_text='关联菜单按钮', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menu_button_permission', to='system.menubutton', verbose_name='关联菜单按钮')),
                ('role', models.ForeignKey(db_constraint=False, help_text='关联角色', on_delete=django.db.models.deletion.CASCADE, related_name='role_button_permission', to='system.role', verbose_name='关联角色')),
            ],
            options={
                'verbose_name': '角色接口权限表',
                'verbose_name_plural': '角色接口权限表',
                'db_table': 'leeadmin_role_menubutton_permission',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='RoleMenuPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_scope', models.SmallIntegerField(choices=[(0, '仅本人数据权限'), (1, '本部门数据权限'), (2, '本部门及以下数据权限'), (3, '自定义部门数据权限'), (4, '全部数据权限'), (5, '同全局数据权限')], default=4, help_text='数据权限', verbose_name='数据权限')),
                ('dept', models.ManyToManyField(blank=True, db_constraint=False, help_text='数据权限-关联部门', to='system.dept', verbose_name='数据权限-关联部门')),
                ('menu', models.ForeignKey(db_constraint=False, help_text='关联菜单', on_delete=django.db.models.deletion.CASCADE, related_name='menu_permission', to='system.menu', verbose_name='关联菜单')),
                ('role', models.ForeignKey(db_constraint=False, help_text='关联角色', on_delete=django.db.models.deletion.CASCADE, related_name='role_menu_permission', to='system.role', verbose_name='关联角色')),
            ],
            options={
                'verbose_name': '角色菜单权限表',
                'verbose_name_plural': '角色菜单权限表',
                'db_table': 'leeadmin_role_menu_permission',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.BigAutoField(help_text='Id', primary_key=True, serialize=False, verbose_name='Id')),
                ('modifier', models.CharField(blank=True, help_text='修改人', max_length=100, null=True, verbose_name='修改人')),
                ('dept_belong', models.CharField(blank=True, help_text='数据归属部门', max_length=100, null=True, verbose_name='数据归属部门')),
                ('update_datetime', models.DateTimeField(auto_now=True, help_text='修改时间', null=True, verbose_name='修改时间')),
                ('create_datetime', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True, verbose_name='创建时间')),
                ('title', models.CharField(help_text='标题', max_length=50, verbose_name='标题')),
                ('key', models.CharField(db_index=True, help_text='键名', max_length=20, verbose_name='键名')),
                ('value', models.TextField(blank=True, help_text='键值', null=True, verbose_name='键值')),
                ('sort', models.IntegerField(blank=True, default=0, help_text='排序', verbose_name='排序')),
                ('status', models.BooleanField(default=True, help_text='启用状态', verbose_name='启用状态')),
                ('data_options', models.TextField(blank=True, help_text='数据options', null=True, verbose_name='数据options')),
                ('form_item_type', models.SmallIntegerField(blank=True, choices=[(0, 'text'), (1, 'datetime'), (2, 'date'), (3, 'textarea'), (4, 'select'), (5, 'checkbox'), (6, 'radio'), (7, 'image'), (8, 'singlefile'), (9, 'switch'), (10, 'number'), (11, 'array'), (12, 'images'), (13, 'time'), (14, 'richtext')], default=0, help_text='表单类型', null=True, verbose_name='表单类型')),
                ('rule', models.TextField(blank=True, help_text='校验规则', null=True, verbose_name='校验规则')),
                ('placeholder', models.CharField(blank=True, help_text='提示信息', max_length=50, null=True, verbose_name='提示信息')),
                ('tip', models.CharField(blank=True, help_text='底部提示说明', max_length=100, null=True, verbose_name='底部提示说明')),
                ('setting', models.TextField(blank=True, help_text='配置', null=True, verbose_name='配置')),
                ('creator', models.ForeignKey(db_constraint=False, help_text='创建人', null=True, on_delete=django.db.models.deletion.SET_NULL, related_query_name='creator_query', to=settings.AUTH_USER_MODEL, verbose_name='创建人')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, help_text='父级', null=True, on_delete=django.db.models.deletion.CASCADE, to='system.systemconfig', verbose_name='父级')),
            ],
            options={
                'verbose_name': '系统配置表',
                'verbose_name_plural': '系统配置表',
                'db_table': 'leeadmin_system_config',
                'ordering': ('sort',),
                'unique_together': {('key', 'parent_id')},
            },
        ),
    ]
